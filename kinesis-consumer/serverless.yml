service: kinesis-consumer

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  timeout: 3
  region: eu-west-1
  iamRoleStatements:
    - ${file(iam/DemoStreamIAM.yml):DemoStreamIAM}

functions:
#  get financial data from yahoo finance api npm package and set it in the project director for simulations
  financialDataProducer:
    handler: src/handlers/financialDataProducer.handler
    name: financialDataProducer
    environment:
      STREAM_NAME: !Ref DemoStream
    events:
      - http:
          method: post
          path: producer
  aggregatorConsumer:
    handler: src/handlers/aggregatorConsumer.handler
    name: aggregatorConsumer
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - DemoStream
              - Arn
          consumer: true
          # You are not allowed to have concurrent batch processing with parallelization factor if you enable tumbling windows
          parallelizationFactor: 1
          # applicative configuration params
          tumblingWindowInSeconds: 60
          batchSize: 100
          startingPosition: LATEST
          batchWindow: 10
          # error handling configuration params
          maximumRetryAttempts: 3
          maximumRecordAgeInSeconds: 120
          bisectBatchOnFunctionError: true
          functionResponseType: ReportBatchItemFailures
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - DeadLetterQueue
                  - Arn
              type: sqs
  amazonConsumer:
    handler: src/handlers/amazonConsumer.handler
    name: amazonConsumer
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - DemoStream
              - Arn
          consumer: true
          parallelizationFactor: 2
          filterPatterns:
            - data:
                symbol: [AMZN]
          # applicative configuration params
          batchSize: 10
          startingPosition: LATEST
          batchWindow: 1
          # error handling configuration params
          maximumRetryAttempts: 3
          maximumRecordAgeInSeconds: 60
          bisectBatchOnFunctionError: true
          functionResponseType: ReportBatchItemFailures
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - DeadLetterQueue
                  - Arn
              type: sqs
  googleConsumer:
    handler: src/handlers/googleConsumer.handler
    name: googleConsumer
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - DemoStream
              - Arn
          consumer: true
          parallelizationFactor: 2
          filterPatterns:
            - data:
                symbol: [GOOG]
          # applicative configuration params
          batchSize: 10
          startingPosition: LATEST
          batchWindow: 1
          # error handling configuration params
          maximumRetryAttempts: 3
          maximumRecordAgeInSeconds: 60
          bisectBatchOnFunctionError: true
          functionResponseType: ReportBatchItemFailures
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - DeadLetterQueue
                  - Arn
              type: sqs
  dlqConsumer:
    handler: src/handlers/dlqConsumer.handler
    name: dlqConsumer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
          batchSize: 1


resources:
  Resources:
    DemoStream: ${file(resources/DemoStream.yml):DemoStream}
    DeadLetterQueue: ${file(resources/DLQ.yml):DeadLetterQueue}

plugins:
  - serverless-bundle
custom:
  bundle:
    linting: false